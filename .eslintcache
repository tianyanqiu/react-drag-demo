[{"E:\\study\\react-drag-list\\src\\index.tsx":"1","E:\\study\\react-drag-list\\src\\App.tsx":"2","E:\\study\\react-drag-list\\src\\nest-list\\index.tsx":"3","E:\\study\\react-drag-list\\src\\nest-list\\data.ts":"4","E:\\study\\react-drag-list\\src\\nest-list\\ServiceCommandUnit.tsx":"5","E:\\study\\react-drag-list\\src\\router.ts":"6","E:\\study\\react-drag-list\\src\\beautiful-dnd-list\\index.tsx":"7","E:\\study\\react-drag-list\\src\\nest-list\\DndDemo.tsx":"8","E:\\study\\react-drag-list\\src\\react-spring-list\\SpringList.tsx":"9"},{"size":483,"mtime":1606895185236,"results":"10","hashOfConfig":"11"},{"size":785,"mtime":1606897857513,"results":"12","hashOfConfig":"11"},{"size":58,"mtime":1606896182813,"results":"13","hashOfConfig":"11"},{"size":864,"mtime":1606896182810,"results":"14","hashOfConfig":"11"},{"size":1918,"mtime":1606896182809,"results":"15","hashOfConfig":"11"},{"size":562,"mtime":1606900475736,"results":"16","hashOfConfig":"11"},{"size":2864,"mtime":1606898151937,"results":"17","hashOfConfig":"11"},{"size":6488,"mtime":1606896182795,"results":"18","hashOfConfig":"11"},{"size":2113,"mtime":1606901498303,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1dpmert",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},"E:\\study\\react-drag-list\\src\\index.tsx",[],["40","41"],"E:\\study\\react-drag-list\\src\\App.tsx",[],"E:\\study\\react-drag-list\\src\\nest-list\\index.tsx",[],"E:\\study\\react-drag-list\\src\\nest-list\\data.ts",[],"E:\\study\\react-drag-list\\src\\nest-list\\ServiceCommandUnit.tsx",[],"E:\\study\\react-drag-list\\src\\router.ts",[],"E:\\study\\react-drag-list\\src\\beautiful-dnd-list\\index.tsx",[],"E:\\study\\react-drag-list\\src\\nest-list\\DndDemo.tsx",[],"E:\\study\\react-drag-list\\src\\react-spring-list\\SpringList.tsx",["42"],"import { render } from \"react-dom\";\r\nimport React, { useRef } from \"react\";\r\nimport clamp from \"lodash-es/clamp\";\r\nimport swap from \"lodash-move\";\r\nimport { useDrag } from \"react-use-gesture\";\r\nimport { useSprings, animated } from \"react-spring\";\r\nimport \"./springList.css\";\r\n\r\n// Returns fitting styles for dragged/idle items\r\nconst fn = (order, down, originalIndex, curIndex, y) => (index) =>\r\n  down && index === originalIndex\r\n    ? {\r\n        y: curIndex * 100 + y,\r\n        scale: 1.1,\r\n        zIndex: \"1\",\r\n        shadow: 15,\r\n        immediate: (n) => n === \"y\" || n === \"zIndex\",\r\n      }\r\n    : {\r\n        y: order.indexOf(index) * 100,\r\n        scale: 1,\r\n        zIndex: \"0\",\r\n        shadow: 1,\r\n        immediate: false,\r\n      };\r\n\r\nfunction DraggableList({ items = \"Lorem ipsum dolor sit\".split(\" \") }) {\r\n  const order = useRef(items.map((_, index) => index)); // Store indicies as a local ref, this represents the item order\r\n  const [springs, setSprings] = useSprings<any>(\r\n    items.length,\r\n    fn(order.current, undefined, undefined, undefined, undefined) as any\r\n  ); // Create springs, each corresponds to an item, controlling its transform, scale, etc.\r\n  const bind = useDrag(({ args: [originalIndex], down, movement: [, y] }) => {\r\n    const curIndex = order.current.indexOf(originalIndex);\r\n    const curRow = clamp(\r\n      Math.round((curIndex * 100 + y) / 100),\r\n      0,\r\n      items.length - 1\r\n    );\r\n    const newOrder = swap(order.current, curIndex, curRow);\r\n    setSprings(fn(newOrder, down, originalIndex, curIndex, y)); // Feed springs new style data, they'll animate the view without causing a single render\r\n    if (!down) order.current = newOrder;\r\n  });\r\n  return (\r\n    <div className=\"content\" style={{ height: items.length * 100 }}>\r\n      {springs.map(({ zIndex, shadow, y, scale }, i) => (\r\n        <animated.div\r\n          {...bind(i)}\r\n          key={i}\r\n          style={{\r\n            zIndex,\r\n            top: y,\r\n            scale,\r\n          }}\r\n          children={items[i]}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DraggableList;\r\n",{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":1,"column":10,"nodeType":"49","messageId":"50","endLine":1,"endColumn":16},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"@typescript-eslint/no-unused-vars","'render' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]